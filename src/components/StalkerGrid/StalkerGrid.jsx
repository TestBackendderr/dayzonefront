import React, { useState } from 'react';
import EditStalkerModal from '../EditStalkerModal/EditStalkerModal';
import Modal from '../Modal/Modal';

const StalkerGrid = ({ 
  stalkers, 
  loading, 
  onSearch, 
  searchBy, 
  searchTerm, 
  onRefresh,
  showRoleFilter = true 
}) => {
  const [modal, setModal] = useState({ isOpen: false, title: '', message: '', type: 'info' });
  const [editModal, setEditModal] = useState({ isOpen: false, stalker: null });

  const showModal = (title, message, type = 'info') => {
    setModal({ isOpen: true, title, message, type });
  };

  const closeModal = () => {
    setModal({ isOpen: false, title: '', message: '', type: 'info' });
  };

  const handleDeleteStalker = async (id) => {
    showModal(
      '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è',
      '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ —Å—Ç–∞–ª–∫–µ—Ä–∞?',
      'confirm'
    );
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    setModal(prev => ({ ...prev, onConfirm: () => performDelete(id) }));
  };

  const performDelete = async (id) => {
    try {
      const { stalkersAPI } = await import('../../services/api');
      await stalkersAPI.delete(id);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–ª–∫–µ—Ä–æ–≤
      onRefresh();
      showModal('–£—Å–ø–µ—Ö', '–°—Ç–∞–ª–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', 'success');
    } catch (error) {
      showModal('–û—à–∏–±–∫–∞', '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞–ª–∫–µ—Ä–∞: ' + (error.response?.data?.message || error.message), 'error');
    }
  };

  const handleEditStalker = (stalker) => {
    setEditModal({ isOpen: true, stalker });
  };

  const closeEditModal = () => {
    setEditModal({ isOpen: false, stalker: null });
  };

  const handleUpdateStalker = () => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–ª–∫–µ—Ä–æ–≤ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    onRefresh();
    showModal('–£—Å–ø–µ—Ö', '–°—Ç–∞–ª–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
  };

  return (
    <>
      {showRoleFilter && (
        <div className="search-section">
          <div className="search-controls">
            <div className="search-type">
              <label>–ü–æ–∏—Å–∫ –ø–æ:</label>
              <select value={searchBy} onChange={(e) => onSearch(e.target.value, searchTerm)}>
                <option value="callsign">–ü–æ–∑—ã–≤–Ω–æ–º—É</option>
                <option value="faceId">ID –ª–∏—Ü–∞</option>
                <option value="fullName">–§–ò–û</option>
              </select>
            </div>
            
            <div className="search-input">
              <input
                type="text"
                placeholder={`–í–≤–µ–¥–∏—Ç–µ ${searchBy === 'callsign' ? '–ø–æ–∑—ã–≤–Ω–æ–π' : searchBy === 'faceId' ? 'ID –ª–∏—Ü–∞' : '–§–ò–û'} –¥–ª—è –ø–æ–∏—Å–∫–∞`}
                value={searchTerm}
                onChange={(e) => onSearch(searchBy, e.target.value)}
              />
              {/* <span className="search-icon">üîç</span> */}
            </div>
          </div>
        </div>
      )}

      <div className="stalkers-grid">
        {loading ? (
          <div className="loading-message">
            <div className="loading-spinner">‚ò¢</div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞–ª–∫–µ—Ä–æ–≤...</p>
          </div>
        ) : stalkers.length > 0 ? (
          stalkers.map(stalker => (
            <div key={stalker.id} className="stalker-card">
              <div className="stalker-photo">
                <img 
                  src={stalker.photo ? `https://dayzone2-backend-gobqh3-cf2a4b-85-215-53-87.traefik.me${stalker.photo}` : `data:image/svg+xml;charset=utf-8,${encodeURIComponent(`
                    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">
                      <rect width="200" height="200" fill="#ff6b6b"/>
                      <text x="100" y="100" font-family="Arial" font-size="16" fill="white" text-anchor="middle" dominant-baseline="middle">${stalker.callsign}</text>
                    </svg>
                  `)}`} 
                  alt={stalker.callsign} 
                />
                <div className="radiation-overlay">‚ò¢</div>
              </div>
              
              <div className="stalker-info">
                <div className="stalker-callsign">
                  <span className="callsign-label">–ü–æ–∑—ã–≤–Ω–æ–π:</span>
                  <span className="callsign-value">{stalker.callsign}</span>
                </div>
                
                <div className="stalker-details">
                  <div className="detail-row">
                    <span className="detail-label">–§–ò–û:</span>
                    <span className="detail-value">{stalker.full_name}</span>
                  </div>
                  
                  <div className="detail-row">
                    <span className="detail-label">ID –ª–∏—Ü–∞:</span>
                    <span className="detail-value face-id">{stalker.face_id}</span>
                  </div>
                  
                  {stalker.role && (
                    <div className="detail-row">
                      <span className="detail-label">–ë–¥ —Ñ—Ä–∞–∫—Ü–∏–∏ :</span>
                      <span className="detail-value role-value">{stalker.role}</span>
                    </div>
                  )}
                  
                  {stalker.note && (
                    <div className="detail-row note-row">
                      <span className="detail-label">–ó–∞–º–µ—Ç–∫–∞:</span>
                      <span className="detail-value note-text">{stalker.note}</span>
                    </div>
                  )}
                </div>
              </div>
              
              <div className="stalker-actions">
                <button 
                  className="action-btn edit-btn"
                  onClick={() => handleEditStalker(stalker)}
                >
                  <span>‚úèÔ∏è</span>
                  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
                <button 
                  className="action-btn delete-btn"
                  onClick={() => handleDeleteStalker(stalker.id)}
                >
                  <span>üóëÔ∏è</span>
                  –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
            </div>
          ))
        ) : (
          <div className="no-results">
            <div className="no-results-icon">‚ò¢</div>
            <h3>–°—Ç–∞–ª–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
            <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
          </div>
        )}
      </div>

      <Modal
        isOpen={modal.isOpen}
        onClose={closeModal}
        title={modal.title}
        message={modal.message}
        type={modal.type}
        onConfirm={modal.onConfirm}
        showCancel={modal.type === 'confirm'}
      />

      <EditStalkerModal
        isOpen={editModal.isOpen}
        onClose={closeEditModal}
        stalker={editModal.stalker}
        onUpdate={handleUpdateStalker}
      />
    </>
  );
};

export default StalkerGrid;
