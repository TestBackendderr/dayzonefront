import React, { useState, useEffect } from 'react';
import { usersAPI } from '../../services/api';
import Modal from '../Modal/Modal';
import './UserManagement.scss';

const UserManagement = () => {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [modal, setModal] = useState({ isOpen: false, title: '', message: '', type: 'info' });
  const [editModal, setEditModal] = useState({ isOpen: false, user: null });
  const [createModal, setCreateModal] = useState({ isOpen: false });

  const roles = [
    { value: 'Admin', label: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', color: '#ff6b6b' },
    { value: 'Duty', label: '–î–æ–ª–≥', color: '#ff0000' },
    { value: 'Freedom', label: '–°–≤–æ–±–æ–¥–∞', color: '#00ff00' },
    { value: 'Neutral', label: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π', color: '#ffff00' },
    { value: 'Mercenary', label: '–ù–∞–µ–º–Ω–∏–∫', color: '#ff6600' },
    { value: 'Bandit', label: '–ë–∞–Ω–¥–∏—Ç', color: '#ff0066' },
    { value: 'Monolith', label: '–ú–æ–Ω–æ–ª–∏—Ç', color: '#6600ff' },
    { value: 'ClearSky', label: '–ß–∏—Å—Ç–æ–µ –Ω–µ–±–æ', color: '#00ffff' },
    { value: 'Loner', label: '–û–¥–∏–Ω–æ—á–∫–∞', color: '#666666' }
  ];

  useEffect(() => {
    loadUsers();
  }, []);

  const loadUsers = async () => {
    try {
      setLoading(true);
      setError('');
      const response = await usersAPI.getAll();
      setUsers(response.users);
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' + (error.response?.data?.message || error.message));
    } finally {
      setLoading(false);
    }
  };

  const showModal = (title, message, type = 'info') => {
    setModal({ isOpen: true, title, message, type });
  };

  const closeModal = () => {
    setModal({ isOpen: false, title: '', message: '', type: 'info' });
  };

  const handleDeleteUser = async (id, username) => {
    showModal(
      '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è',
      `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${username}"?`,
      'confirm'
    );
    
    setModal(prev => ({ ...prev, onConfirm: () => performDelete(id) }));
  };

  const performDelete = async (id) => {
    try {
      await usersAPI.delete(id);
      loadUsers();
      showModal('–£—Å–ø–µ—Ö', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', 'success');
    } catch (error) {
      showModal('–û—à–∏–±–∫–∞', '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + (error.response?.data?.message || error.message), 'error');
    }
  };

  const handleEditUser = (user) => {
    setEditModal({ isOpen: true, user });
  };

  const closeEditModal = () => {
    setEditModal({ isOpen: false, user: null });
  };

  const handleCreateUser = () => {
    setCreateModal({ isOpen: true });
  };

  const closeCreateModal = () => {
    setCreateModal({ isOpen: false });
  };

  const getRoleInfo = (role) => {
    return roles.find(r => r.value === role) || { label: role, color: '#666666' };
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  return (
    <div className="user-management">
      <div className="management-header">
        <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</h2>
        <p>–°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å–∏—Å—Ç–µ–º—ã</p>
        <button className="btn-create-user" onClick={handleCreateUser}>
          <span>üë§</span>
          –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        </button>
      </div>

      {error && (
        <div className="error-message">
          <span className="error-icon">‚ö†Ô∏è</span>
          {error}
        </div>
      )}

      <div className="users-table">
        {loading ? (
          <div className="loading-message">
            <div className="loading-spinner">‚ò¢</div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</p>
          </div>
        ) : users.length > 0 ? (
          <table>
            <thead>
              <tr>
                <th>–ü–æ–∑—ã–≤–Ω–æ–π</th>
                <th>–†–æ–ª—å</th>
                <th>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</th>
                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
              </tr>
            </thead>
            <tbody>
              {users.map(user => {
                const roleInfo = getRoleInfo(user.role);
                return (
                  <tr key={user.id}>
                    <td className="username-cell">
                      <span className="user-icon">üë§</span>
                      {user.username}
                    </td>
                    <td className="role-cell">
                      <span 
                        className="role-badge" 
                        style={{ backgroundColor: roleInfo.color }}
                      >
                        {roleInfo.label}
                      </span>
                    </td>
                    <td className="date-cell">
                      {formatDate(user.created_at)}
                    </td>
                    <td className="actions-cell">
                      <button 
                        className="btn-edit"
                        onClick={() => handleEditUser(user)}
                      >
                        ‚úèÔ∏è
                      </button>
                      <button 
                        className="btn-delete"
                        onClick={() => handleDeleteUser(user.id, user.username)}
                      >
                        üóëÔ∏è
                      </button>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        ) : (
          <div className="no-users">
            <div className="no-users-icon">üë•</div>
            <h3>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
            <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</p>
          </div>
        )}
      </div>

      <Modal
        isOpen={modal.isOpen}
        onClose={closeModal}
        title={modal.title}
        message={modal.message}
        type={modal.type}
        onConfirm={modal.onConfirm}
        showCancel={modal.type === 'confirm'}
      />

      <CreateUserModal
        isOpen={createModal.isOpen}
        onClose={closeCreateModal}
        onUserCreated={loadUsers}
        roles={roles}
      />

      <EditUserModal
        isOpen={editModal.isOpen}
        onClose={closeEditModal}
        user={editModal.user}
        onUserUpdated={loadUsers}
        roles={roles}
      />
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const CreateUserModal = ({ isOpen, onClose, onUserCreated, roles }) => {
  const [formData, setFormData] = useState({
    username: '',
    password: '',
    role: 'Duty'
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
    if (isOpen) {
      setFormData({ username: '', password: '', role: 'Duty' });
      setError('');
    }
  }, [isOpen]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      await usersAPI.create(formData);
      onUserCreated();
      onClose();
    } catch (error) {
      setError(error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    if (!loading) {
      setError('');
      onClose();
    }
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="modal">
        <div className="modal-header">
          <h2>–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>
          <button className="close-btn" onClick={handleClose} disabled={loading}>√ó</button>
        </div>

        <form onSubmit={handleSubmit} className="user-form">
          <div className="form-group">
            <label htmlFor="username">–ü–æ–∑—ã–≤–Ω–æ–π *</label>
            <input
              type="text"
              id="username"
              name="username"
              value={formData.username}
              onChange={handleInputChange}
              required
              disabled={loading}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑—ã–≤–Ω–æ–π"
            />
          </div>

          <div className="form-group">
            <label htmlFor="password">–ü–∞—Ä–æ–ª—å *</label>
            <input
              type="password"
              id="password"
              name="password"
              value={formData.password}
              onChange={handleInputChange}
              required
              disabled={loading}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
            />
          </div>

          <div className="form-group">
            <label htmlFor="role">–†–æ–ª—å *</label>
            <select
              id="role"
              name="role"
              value={formData.role}
              onChange={handleInputChange}
              required
              disabled={loading}
            >
              {roles.map(role => (
                <option key={role.value} value={role.value}>
                  {role.label}
                </option>
              ))}
            </select>
          </div>

          {error && (
            <div className="error-message">
              <span className="error-icon">‚ö†Ô∏è</span>
              {error}
            </div>
          )}

          <div className="form-actions">
            <button type="button" className="btn-cancel" onClick={handleClose} disabled={loading}>
              –û—Ç–º–µ–Ω–∞
            </button>
            <button type="submit" className={`btn-save ${loading ? 'loading' : ''}`} disabled={loading}>
              {loading ? (
                <>
                  <span className="loading-spinner">‚ò¢</span>
                  –°–æ–∑–¥–∞–Ω–∏–µ...
                </>
              ) : (
                <>
                  <span className="btn-icon">üë§</span>
                  –°–æ–∑–¥–∞—Ç—å
                </>
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const EditUserModal = ({ isOpen, onClose, user, onUserUpdated, roles }) => {
  const [formData, setFormData] = useState({
    username: '',
    password: '',
    role: 'Duty'
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
    if (user && isOpen) {
      setFormData({
        username: user.username || '',
        password: '',
        role: user.role || 'Duty'
      });
      setError('');
    }
  }, [user, isOpen]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      const updateData = {
        username: formData.username,
        role: formData.role
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
      if (formData.password.trim()) {
        updateData.password = formData.password;
      }

      await usersAPI.update(user.id, updateData);
      onUserUpdated();
      onClose();
    } catch (error) {
      setError(error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    if (!loading) {
      setError('');
      onClose();
    }
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="modal">
        <div className="modal-header">
          <h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>
          <button className="close-btn" onClick={handleClose} disabled={loading}>√ó</button>
        </div>

        <form onSubmit={handleSubmit} className="user-form">
          <div className="form-group">
            <label htmlFor="username">–ü–æ–∑—ã–≤–Ω–æ–π *</label>
            <input
              type="text"
              id="username"
              name="username"
              value={formData.username}
              onChange={handleInputChange}
              required
              disabled={loading}
            />
          </div>

          <div className="form-group">
            <label htmlFor="password">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</label>
            <input
              type="password"
              id="password"
              name="password"
              value={formData.password}
              onChange={handleInputChange}
              disabled={loading}
              placeholder="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å"
            />
          </div>

          <div className="form-group">
            <label htmlFor="role">–†–æ–ª—å *</label>
            <select
              id="role"
              name="role"
              value={formData.role}
              onChange={handleInputChange}
              required
              disabled={loading}
            >
              {roles.map(role => (
                <option key={role.value} value={role.value}>
                  {role.label}
                </option>
              ))}
            </select>
          </div>

          {error && (
            <div className="error-message">
              <span className="error-icon">‚ö†Ô∏è</span>
              {error}
            </div>
          )}

          <div className="form-actions">
            <button type="button" className="btn-cancel" onClick={handleClose} disabled={loading}>
              –û—Ç–º–µ–Ω–∞
            </button>
            <button type="submit" className={`btn-save ${loading ? 'loading' : ''}`} disabled={loading}>
              {loading ? (
                <>
                  <span className="loading-spinner">‚ò¢</span>
                  –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                </>
              ) : (
                <>
                  <span className="btn-icon">üíæ</span>
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </>
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default UserManagement;
